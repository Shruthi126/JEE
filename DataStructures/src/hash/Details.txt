There are several differences between HashMap and Hashtable in Java:

* Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better 
  than synchronized ones.
  
* Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.

* One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily 
  swap out the HashMap for a LinkedHashMap. 
  This wouldn't be as easy if you were using Hashtable.
  Since synchronization is not an issue for you, I'd recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.
  
------------------------------------------------------------------------------------------------------------------------------------------------------------
ConcurrentHashMap vs Hashtable in Java 

* ConcurrentHashMap uses multiple buckets to store data. This avoids read locks and greatly improves performance over a HashTable. 

* Both are thread safe, but there are obvious performance wins with ConcurrentHashMap.

* When you read from a ConcurrentHashMap using get(), there are no locks, contrary to the HashTable for which all operations are simply synchronized. 
  HashTable was released in old versions of Java whereas ConcurrentHashMap is a java 5+ thing.

  HashMap is the best thing to use in a single threaded application.
 ------------------------------------------------------------------------------------------------------------------------------------------------------------ 
  
 ConcurrentHashMap and Hashtable locking mechanism
  
Hashtable is belongs to the Collection framework; ConcurrentHashMap belongs to the Executor framework.
Hashtable uses single lock for whole data. ConcurrentHashMap uses multiple locks on segment level (16 by default) instead of object level i.e. whole Map.
ConcurrentHashMap locking is applied only for updates. In case of retrievals, it allows full concurrency, retrievals reflect the results of the most recently completed update operations. So reads can happen very fast while writes are done with a lock.
ConcurrentHashMap doesn't throw a ConcurrentModificationException if one thread tries to modify it while another is iterating over it and does not allow null values.
ConcurrentHashMap returns Iterator, which fails-safe (i.e. iterator will make a copy of the internal data structure) on concurrent modification.
ConcurrentHashMap uses a database shards logic (Segment<K, V>[] segments) is known as Concurrency-Level, i.e. divides the data into shards(segments) than puts locks on each shard (segment) instead of putting a single lock for whole data (Map). The default value is 16.
To understand the ConcurrentHashMap more technically please look at this link

The following analogy helps you get understand the concept only(not logic)

Assume Hashtable and ConcurrentHashMap are two types of Homes.
Hashtable locks home's main door.
ConcurrentHashMap locks specific room door instead of main door.

Which is more efficient for threaded applications?
ConcurrentHashMap is more efficient for threaded applications